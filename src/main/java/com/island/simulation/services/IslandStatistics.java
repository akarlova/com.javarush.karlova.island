package com.island.simulation.services;

import com.island.simulation.config.AnimalStats;
import com.island.simulation.entity.creatures.Creature;
import com.island.simulation.entity.creatures.Worm;
import com.island.simulation.entity.creatures.plants.Grass;
import com.island.simulation.entity.map.Island;
import com.island.simulation.entity.map.structures.Land;
import com.island.simulation.entity.map.structures.Sand;
import com.island.simulation.entity.map.structures.Water;
import com.island.simulation.factory.CreatureFactory;
import com.island.simulation.utils.StatsAggregator;

import java.util.Arrays;
import java.util.Map;
import java.util.stream.Collectors;

public class IslandStatistics {

    private final Island island;

    public IslandStatistics(Island island) {
        this.island = island;
    }

    //–≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–π —Ç–∞–∫—Ç

    public void printStatistics() {
        Map<String, Integer> births = StatsAggregator.aggregateBirths(island);
        Map<String, Integer> deaths = StatsAggregator.aggregateDeaths(island);
        Map<String, Integer> population = StatsAggregator.aggregateCurrentPopulation(island);


        LoggingService.log("=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∞–∫—Ç ‚Ññ " + island.getCurrentTurn().get() + " ===");
        for (String creatureName : population.keySet()) {
            // –ò—Å–∫–ª—é—á–∞–µ–º Grass –∏ Worm (–µ—Å–ª–∏ —É –Ω–∏—Ö –æ—Ç–¥–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥)
            if (creatureName.equals("Grass") || creatureName.equals("Worm")) {
                continue;
            }
            int available = population.getOrDefault(creatureName, 0);
            int dead = deaths.getOrDefault(creatureName, 0);
            int born = births.getOrDefault(creatureName, 0);

            String icon = CreatureFactory.getAnimalStats().containsKey(creatureName)
                    ? CreatureFactory.getAnimalStats().get(creatureName).getIcon()
                    : "";
            LoggingService.log(String.format("%s [%s] : dead - %d |were born - %d | available - %d |  ",
                    icon, creatureName, dead, born, available));
        }
        // –í—ã–≤–æ–¥ –¥–ª—è —Ç—Ä–∞–≤—ã –∏ —á–µ—Ä–≤—è –æ—Ç–¥–µ–ª—å–Ω–æ
        int grassCount = StatsAggregator.aggregateSpecificPopulation(island, "Grass");
        LoggingService.log(String.format("üå± [Grass] : %d", grassCount));
        int wormCount = StatsAggregator.aggregateSpecificPopulation(island, "Worm");
        LoggingService.log(String.format("÷é’ª [WORM] : available - %d", wormCount));

        //—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–º—É —Å–æ—Å—Ç–∞–≤—É –û—Å—Ç—Ä–æ–≤–∞:

        long landCount = Arrays.stream(island.getMap())
                .flatMap(Arrays::stream)
                .filter(cell -> cell.getStructure() instanceof Land)
                .count();
        long waterCount = Arrays.stream(island.getMap())
                .flatMap(Arrays::stream)
                .filter(cell -> cell.getStructure() instanceof Water)
                .count();
        long sandCount = Arrays.stream(island.getMap())
                .flatMap(Arrays::stream)
                .filter(cell -> cell.getStructure() instanceof Sand)
                .count();
        String landIcon = new Land().getIcon();
        String waterIcon = new Water().getIcon();
        String sandIcon = new Sand().getIcon();

        LoggingService.log(String.format("%s [Land] : %d", landIcon, landCount));
        LoggingService.log(String.format("%s [Water] : %d", waterIcon, waterCount));
        LoggingService.log(String.format("%s [Sand] : %d", sandIcon, sandCount));

        LoggingService.log("=======================================================");
    }
}

